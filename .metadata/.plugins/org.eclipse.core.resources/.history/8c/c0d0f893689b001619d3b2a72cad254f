/*
 * rf_task.c
 *
 *  Created on: 24 Eki 2016
 *      Author: admin
 */
#include "chip.h"
#include "board.h"
#include "timer.h"
#include "le50.h"
#include "iap_config.h"
#include "ProcessTask.h"
#include "ATCommands.h"
#include "QuectelM95.h"
#include "settings.h"
#include "messages.h"
#include "io_ctrl.h"
#include "offline.h"
#include "gsm.h"
#include "gps.h"
#include "status.h"
#include "trace.h"
#include "utils.h"
#include "MMA8652.h"
#include "gSensor.h"
#include "rf_task.h"
#include <ctype.h>
#include <string.h>
#include <stdlib.h>


static bool parse_rf_module_id_field(char *pos, char *buffer);
static bool parse_door_status_field(char * pos,char *buffer);
static bool parse_temp_value_field(char * pos, char *buffer);
static bool parse_bat_voltage_field(char * pos, char *buffer);
static bool parse_rssi_field(char * pos, char *buffer);

static const PINMUX_GRP_T T2_LE50PortMuxTable[] = {
	{LE50_TX_PORT_NUM,  LE50_TX_PIN_NUM,   IOCON_MODE_PULLUP | IOCON_FUNC3},	/* TXD3 */
	{LE50_RX_PORT_NUM,  LE50_RX_PIN_NUM,   IOCON_MODE_PULLUP | IOCON_FUNC3},	/* RXD3 */
};
static const RF_MSG_PARSER_INFO_T rf_msg_parser_info[] =
{
	{"1=", parse_rf_module_id_field},
    {"2=", parse_door_status_field},
	{"3=", parse_temp_value_field},
	{"4=", parse_bat_voltage_field},
	{"5=", parse_rssi_field},

};
#define LE50_UART_ISR_HANDLER 	    UART3_IRQHandler
#define LE50_UART_IRQ_SELECTION     UART3_IRQn

static RINGBUFF_T le50_txring,le50_rxring;          /* Transmit and receive ring buffers */
static uint8_t le50_rxbuff[LE50_UART_RRB_SIZE];
static uint8_t le50_txbuff[LE50_UART_SRB_SIZE];     /* Transmit and receive buffers */

/************************************************** */
void le50_uart_init()
{
	Chip_IOCON_SetPinMuxing(LPC_IOCON, T2_LE50PortMuxTable, sizeof(T2_LE50PortMuxTable) / sizeof(PINMUX_GRP_T));

	Chip_UART_Init(LE50_PORT);
	Chip_UART_SetBaud(LE50_PORT, LE50_BAUD_RATE);
	Chip_UART_ConfigData(LE50_PORT, UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS);

	/* Enable UART Transmit */
	Chip_UART_TXEnable(LE50_PORT);

	RingBuffer_Init(&le50_rxring, le50_rxbuff, 1, LE50_UART_RRB_SIZE);
	RingBuffer_Init(&le50_txring, le50_txbuff, 1, LE50_UART_SRB_SIZE);

	/* Enable receive data and line status interrupt */
	Chip_UART_IntEnable(LE50_PORT, (UART_IER_RBRINT | UART_IER_RLSINT));

	/* preemption = 1, sub-priority = 1 */
	NVIC_SetPriority(LE50_UART_IRQ_SELECTION, 1);
	NVIC_EnableIRQ(LE50_UART_IRQ_SELECTION);
}
/************************************************** */
/*   Interrupt handler for LE50 UART interface      */
/************************************************** */
void LE50_UART_ISR_HANDLER(void)
{
	Chip_UART_IRQRBHandler(LE50_PORT, &le50_rxring, &le50_txring);
}
/************************************************** */
bool Rf_Task()
{
	char recv_buffer[RF_MAX_PACKET_SIZE];
	memset(recv_buffer, 0, RF_MAX_PACKET_SIZE);
	if(Get_UartLine(LE50_PORT, &le50_rxring,  recv_buffer, RF_MAX_PACKET_SIZE, CHAR_STX, CHAR_CR, 2)){
			PRINT_K("\nRF port message received\n");
			PRINT_K(recv_buffer);
			rf_parse_packet(recv_buffer);
	}
/*	switch(rf_task_state){
		case STATE_WAIT_STX:
		le50_get_rx_buffer(&temp, 1);
		if(temp == CHAR_STX){
			rf_task_state = STATE_WAIT_ETX;
			Set_Timer(&RF_TASK_PACKET_TIMER, RF_PACKET_TIMEOUT);
		}
		break;

		case STATE_WAIT_ETX:
		if(mn_timer_expired(&RF_TASK_PACKET_TIMER)){
			for(i=0; i < RF_MAX_PACKET_SIZE; i++){
				le50_get_rx_buffer(&temp, 1);
				recv_buffer[i] = temp;
				if(temp == CHAR_ETX){
					rf_task_state = STATE_WAIT_STX;
					rf_parse_rf_packet(recv_buffer);
				}
			}
		}
		break;
	}*/
}
/*************************************/
void rf_send(char *command)
{
	Chip_UART_SendRB(LE50_PORT, &le50_txring, command, strlen(command));

}
/************************************************/
uint16_t rf_get_rx_buffer(char *buffer,  uint16_t buffer_size, TIMER_TICK_T idle_timeout)
{
	memset(buffer, 0, buffer_size);

    return Chip_UART_ReadRB(LE50_PORT, &le50_rxring, buffer, buffer_size);
}
/***************************************************/
bool rf_parse_packet(char *recv_buffer)
{
	uint8_t i=0;
	char *p_field;
	char msg_parse_buffer[RF_MAX_PACKET_SIZE];

	memcpy(msg_parse_buffer, recv_buffer, RF_MAX_PACKET_SIZE);
	for(i = 0; i < sizeof(rf_msg_parser_info) / sizeof(rf_msg_parser_info[0]); i++ ){
			p_field = strstr(msg_parse_buffer, rf_msg_parser_info[i].str_app_id);
			if(p_field != NULL){
				result = rf_msg_parser_info[i].field_parser_callback(p_field + strlen(rf_msg_parser_info[i].str_app_id), msg_parse_buffer);
				break;
			}
	}
}
/***************************************************/
static bool parse_rf_module_id_field(char *pos, char *buffer)
{
	char module_id[LE50_SERIAL_NUMBER_SIZE+ 1];
	char print_buf[128];
	PRINT_K("\nIn parse_rf_module_id_field() function\n");

	memset(module_id,0, sizeof(module_id));

	memcpy(module_id, pos, LE50_SERIAL_NUMBER_SIZE);
	sprintf(print_buf,"\nModule ID %s\n", module_id);
	PRINT_K(print_buf);

}
/***************************************************/
static bool parse_door_status_field(char * pos, char *buffer)
{
	bool door1_status, door2_status;

	if(*pos == '1'){
		PRINT_K("\nDOOR 1 OPEN\n");
		door1_status = true;
	}
	else{
		PRINT_K("\nDOOR 1 CLOSED\n");
		door1_status = false;
	}

	if(*(pos + 2) == '1'){
		PRINT_K("\nDOOR 2 OPEN\n");
		door2_status = true;
	}
	else{
		PRINT_K("\nDOOR 2 CLOSED\n");
		door2_status = false;
	}

}
/***************************************************/
static bool parse_temp_value_field(char * p_pos, char *buffer)
{
	char printBuf[128];
	char str_temp_val[8];
	char *p_comma;
	char *p_end;
	uint16_t temp_val1,temp_val2;

	p_end = strchr(p_pos, RF_NODE_MSG_FIELD_SEPERATOR)

    if(p_end != NULL)
	   *p_end = '\0';
    else
    	return false;

	p_comma = strchr(p_pos, ',');

	if(p_comma != NULL){
		memset(str_temp_val, 0, sizeof(str_temp_val));
		memcpy(str_temp_val, p_pos, (p_comma - p_pos));
		temp_val1 = atoi(str_temp_val);
		memset(str_temp_val, 0, sizeof(str_temp_val));
		memcpy(str_temp_val, p_comma+ 1 , (p_end - p_comma));
		temp_val2 = atoi(str_temp_val);
	}
	else{
		memset(str_temp_val, 0, sizeof(str_temp_val));
		memcpy(str_temp_val, p_pos, (p_end - p_comma));
		temp_val1 = atoi(str_temp_val);
	}
	sprintf(printBuf, "Temp1: %d Temp2: %d\n", temp_val1,temp_val2);
	PRINT_K("\nIn parse_temp_value_field() function\n");
	return true;
}
/***************************************************/
static bool parse_bat_voltage_field(char * pos, char *buffer)
{

}
/***************************************************/
static bool parse_rssi_field(char *pos, char *buffer)
{

}
