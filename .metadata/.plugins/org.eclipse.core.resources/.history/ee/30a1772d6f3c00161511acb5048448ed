 #include "chip.h"
#include "board.h"
#include "bsp.h"
#include "MMA8652.h"
#include "gSensor.h"
#include "io_ctrl.h"
#include "timer.h"
#include "settings.h"
#include "status.h"
#include "ProcessTask.h"
#include "gps.h"
#include "trace.h"
#include <ctype.h>
#include <math.h>
#include <string.h>
#include <stdlib.h>

#define GPS_PORT                    LPC_UART2


#define GPS_UART_ISR_HANDLER 	    UART2_IRQHandler
#define GPS_IRQ_SELECTION 	        UART2_IRQn

#define GPS_TX_PORT_NUM            0
#define GPS_RX_PORT_NUM            0

#define GPS_TX_PIN_NUM             10
#define GPS_RX_PIN_NUM             11

#define NMEA_NEXT_TOKEN(buffer)      if (**buffer != '\0') { (*buffer)++; }

/* Current token in the NMEA sentence */
#define NMEA_CURRENT_TOKEN(buffer)   ((uint8_t)**buffer)
void check_sudden_acceleration_by_gps_speed(uint16_t speed);
void check_sudden_deacceleration_by_gps_speed(uint16_t speed);
/*****************************************************************
 Pin muxing configuration
 refer to section 8.5.5 Pin Function Select Register 4 of UM1060
 to select IOCON_FUNC mode
****************************************************************/
static const PINMUX_GRP_T T2_GpsPortMuxTable[] = {
	{GPS_TX_PORT_NUM,  GPS_TX_PIN_NUM,   IOCON_MODE_PULLUP | IOCON_FUNC1},	/* xmit to GPS module */
	{GPS_RX_PORT_NUM,  GPS_RX_PIN_NUM,   IOCON_MODE_PULLUP | IOCON_FUNC1},	/* recv from GPS module */
};


G_VALUES_T gsampleBuffer[MOVING_AVG_WINDOW_SIZE];
static RINGBUFF_T gps_txring,gps_rxring;          /* Transmit and recei  ve ring buffers */
static uint8_t gps_rxbuff[GPS_UART_RRB_SIZE];
static uint8_t gps_txbuff[GPS_UART_SRB_SIZE];     /* Transmit and receive buffers */
static uint8_t gpsRxBuffer[GPS_MESSAGE_BUFFER_SIZE];
static GPS_POSITION_DATA_T current_position;
static GPS_POSITION_DATA_T prev_position;
static NMEA_MSG_T nmea_msg_t;
static double f_distance;
float f_kmTempCounter;

static bool nmea_parse_gpgsa(const char *, NMEA_MSG_T *);
static bool nmea_parse_gprmc(const char *, NMEA_MSG_T *);
static bool nmea_parse_gpgga(const char *, NMEA_MSG_T *);

static bool nmea_parse_int(const char **, int8_t, int32_t *const);
static bool nmea_parse_character(const char **, char *const);
static bool nmea_parse_fixed_point(const char **, int32_t *const, int32_t *const);

uint8_t ValidateNMEAChecksum(char *);

static int32_t gps_convert_to_linear_degrees(const struct nmea_gps_coord_val *const,const enum nmea_gps_coord_indicator);
static double  gps_calculate_distance(int32_t, int32_t, int32_t, int32_t);
void ParseNMEAMessage(char* gps_msg, NMEA_MSG_T *nmea_msg_t);
void EnableGpsPower();
GPS_POSITION_DATA_T  *ProcessGPSMessage(char *,  NMEA_MSG_T *);
float sample_g_data[]={-0.140625,-0.066406,-0.050781, 0.007812,-0.062500, -0.031250, -0.046875, 0.070312, -0.871094, -0.941406,  0.050781,
		                -1.070312, -0.980469, -0.953125, -1.019531, 0.155000,  0.000000,  0.007812, 1.082031, 1.191406,-0.031250, -0.062500,
						0.066406, 0.140625, 0.050781, 1.070312, 0.980469,  0.953125,  1.019531, 0.980469, 1.019531,-0.062500, -0.031250, -0.046875, 0.070312
                     };

uint16_t sample_count = 0;
/* -------------------------------------------------------------------------- */
/*                 Initialize hardware for GPS interface                      */
/* -------------------------------------------------------------------------- */
void gps_init(uint32_t baud_rate)
{
	Chip_IOCON_SetPinMuxing(LPC_IOCON, T2_GpsPortMuxTable, sizeof(T2_GpsPortMuxTable) / sizeof(PINMUX_GRP_T));

	Chip_UART_Init(GPS_PORT);

	Chip_UART_SetBaud(GPS_PORT, baud_rate);
	Chip_UART_ConfigData(GPS_PORT, UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS);

	/* Enable UART Transmit */
	Chip_UART_TXEnable(GPS_PORT);

	RingBuffer_Init(&gps_rxring, gps_rxbuff, 1, GPS_UART_RRB_SIZE);
	RingBuffer_Init(&gps_txring, gps_txbuff, 1, GPS_UART_SRB_SIZE);
	memset(gsampleBuffer, 0, sizeof(gsampleBuffer));
	/* Enable receive data and line status interrupt */
	Chip_UART_IntEnable(GPS_PORT, (UART_IER_RBRINT | UART_IER_RLSINT));

	/* preemption = 1, sub-priority = 1 */
	NVIC_SetPriority(GPS_IRQ_SELECTION, 1);
	NVIC_EnableIRQ(GPS_IRQ_SELECTION);

	EnableGpsPower();

	PRINT_K("\n******************GPS initialized*****************\n");
}
/* -------------------------------------------------------------------------- */
/*                 Interrupt handler for GPS UART interface                   */
/* -------------------------------------------------------------------------- */
__attribute__((short_call))
void __attribute__ ((noinline)) UART2_IRQHandler(void)
{
	Chip_UART_IRQRBHandler(GPS_PORT, &gps_rxring, &gps_txring);
}
/*-------------------------------------------------------------------------- */
void GpsTask()
{
	memset(gpsRxBuffer, 0, GPS_MESSAGE_BUFFER_SIZE);
	if(Get_UartLine(GPS_PORT, &gps_rxring,  gpsRxBuffer, GPS_MESSAGE_BUFFER_SIZE, '$', '\r', 2)){
	//	PRINT_K(gpsRxBuffer);
		ProcessGPSMessage(gpsRxBuffer, &nmea_msg_t);
	}
	return;
}
/*-------------------------------------------------------------------------- */
void EnableGpsPower()
{
	Chip_GPIO_SetPinState(LPC_GPIO, GPS_PWR_ENABLE_PORT_NUM, GPS_PWR_ENABLE_PIN_NUM, FALSE);
}
/*-------------------------------------------------------------------------- */
GPS_POSITION_DATA_T *ProcessGPSMessage(char *gps_msg,  NMEA_MSG_T *nmea_msg_t)
{
	G_VALUES_T mma8652_accel_values;
	static uint16_t gSampleCount = 0;
	G_VALUES_T averageGValue;
	char printBuf[256];

	if(!ValidateNMEAChecksum(gps_msg)) {
		PRINT_K("GPS checksum failed");
		return NULL;
	}
	else {
		ParseNMEAMessage(gps_msg, nmea_msg_t);
		switch(nmea_msg_t->type)
		{
			case NMEA_TYPE_GPRMC:
			sprintf(printBuf,"\n%s\n",gps_msg);
			PRINT_GPS(gps_msg);

			mma865x_read_accel_values(&mma8652_accel_values);
			gsampleBuffer[gSampleCount] = mma8652_accel_values;

			/* process g values only if we have enough number of samples in moving average buffer*/
		    if(gSampleCount == (MOVING_AVG_WINDOW_SIZE - 1)){
		   /* 	averageGValue = MovingAverage(gsampleBuffer, MOVING_AVG_WINDOW_SIZE - 1);
		    	ShiftBuffer(gsampleBuffer, MOVING_AVG_WINDOW_SIZE);  */                        /* shift samples to left */

			/*    sprintf(printBuf,"%d,%d,%f,%f,%f\n",nmea_msg_t->nmea_msg_items_t.gprmc.speed*1852/1000,
			    									 nmea_msg_t->nmea_msg_items_t.gprmc.course,
													averageGValue.xAccel,
							   	   	   	   	   	    averageGValue.yAccel,
											        averageGValue.zAccel);*/
		    	sprintf(printBuf,"%d,%d,%f,%f,%f\n",nmea_msg_t->nmea_msg_items_t.gprmc.speed*1852/1000,
		    				    									 nmea_msg_t->nmea_msg_items_t.gprmc.course,
																	 mma8652_accel_values.xAccel,
																	 mma8652_accel_values.yAccel,
																	 mma8652_accel_values.zAccel);
			    PRINT_G(printBuf);

			    check_sudden_acceleration_by_gps_speed(nmea_msg_t->nmea_msg_items_t.gprmc.speed*1852/1000);
			    check_sudden_deacceleration_by_gps_speed(nmea_msg_t->nmea_msg_items_t.gprmc.speed*1852/1000);

			    check_sudden_acceleration(nmea_msg_t->nmea_msg_items_t.gprmc.speed*1852/1000,
									      nmea_msg_t->nmea_msg_items_t.gprmc.course,
								          &averageGValue);

			    check_sudden_deacceleration(nmea_msg_t->nmea_msg_items_t.gprmc.speed*1852/1000,
			    							nmea_msg_t->nmea_msg_items_t.gprmc.course,
			    						    &averageGValue);

			    check_xy_acceleration(nmea_msg_t->nmea_msg_items_t.gprmc.speed*1852/1000,
			    							nmea_msg_t->nmea_msg_items_t.gprmc.course,
			    						    &averageGValue);
		    }
		    else
		    	gSampleCount++;
			/* keep previous coordinates */
			if(nmea_msg_t->nmea_msg_items_t.gprmc.status == NMEA_GPRMC_VALID) {
				gps_set_led_status(TRUE);
				if(Get_TripGpsStatus() == INVALID_GPS_ON_IGNITION)
					Init_TripInfo(VALID_GPS_ON_IGNITION);

				current_position.latitude = gps_convert_to_linear_degrees(
						   &(nmea_msg_t->nmea_msg_items_t.gprmc.coords.latitude),
						   NMEA_GPS_COORD_NORTH);

				current_position.longitude = gps_convert_to_linear_degrees(
						   &(nmea_msg_t->nmea_msg_items_t.gprmc.coords.longitude),
						   NMEA_GPS_COORD_EAST);



				/* Measure distance between two coordinates */
				f_distance = gps_calculate_distance(prev_position.latitude,
											   	   current_position.latitude,
												   prev_position.longitude,
											       current_position.longitude);


				if(Get_IgnitionStatus() && nmea_msg_t->nmea_msg_items_t.gprmc.speed *1852/1000 > IDLE_SPEED_THRESHOLD){
					current_position.distance += f_distance;
					f_kmTempCounter += f_distance;
				}
				sprintf(printBuf,"\nCurrent distance : %lf, %X\n", current_position.distance, current_position.distance);
				//PRINT_K(printBuf);
				sprintf(printBuf,"\nTemp distance : %d\n", (unsigned int)f_kmTempCounter);
				//PRINT_K(printBuf);

				if(ifKmRecordLimitExceeded())
					settings_update_km_counter(Get_FlashKmValue() + current_position.distance/1000);

				prev_position = current_position;
			}
			else
				gps_set_led_status(FALSE);
			break;  /*  end of NMEA_TYPE_GPRMC */

			case NMEA_TYPE_GPGGA:
			break;

			case NMEA_TYPE_GPGSA:
			break;
			/*****/
		}  /** end of switch statement */
	}
	return &current_position;
}
/**********************************************************************/
/*  Validates NMEA message checksum. Returns 1 if chacksum is correct */
/*  otherwise returns 0                                                */
/**********************************************************************/
uint8_t ValidateNMEAChecksum(char *gps_msg)
{
	uint8_t i = 1;
	uint8_t u8_calcChecksum = 0;
	return 1;
	/* string representation of both received and calculated checksums */
	char s_calcChecksum[3];
	char s_recvChecksum[3];

	uint8_t u8_msgLen = strlen(gps_msg);

	while(gps_msg[i] != '*')
		u8_calcChecksum ^= gps_msg[i++];

	s_calcChecksum[0] = u8_calcChecksum / 16 + 0x30;
	s_calcChecksum[1] = u8_calcChecksum % 16;

	if( s_calcChecksum[1] < 10)
		s_calcChecksum[1] =s_calcChecksum[1] + 48;
	else
		s_calcChecksum[1] = s_calcChecksum[1] + 55;

	s_calcChecksum[2] = '\0';

	strncpy(s_recvChecksum, &gps_msg[u8_msgLen - 4], 2);
	if(strcmp(s_calcChecksum, s_recvChecksum) == 0)
		return 1;
	else
		return 0;
}
/*************************************************************************/
NMEA_STRINGS_T string_cases [] =
{
	{ "$GPRMC", nmea_parse_gprmc },
    { "$GPGGA", nmea_parse_gpgga },
	{ "$GPGSA", nmea_parse_gpgsa },
};
/**********************************************************************/
void ParseNMEAMessage(char* gps_msg, NMEA_MSG_T *nmea_msg_t)
{
	NMEA_STRINGS_T* pCase;
	char buffer[7];
	memset(buffer, 0, sizeof(buffer));
   /* get the nmea message ID */
	strncpy(buffer, gps_msg, 6);

//	PRINT_K(buffer);
	nmea_msg_t->type = (enum nmea_data_type)NMEA_TYPE_UNKNOWN;
    for(pCase = string_cases
				; pCase != string_cases + sizeof( string_cases ) / sizeof( string_cases[0])
				; pCase++ ){
			if(strcmp( pCase->string, buffer) == 0){
				(*pCase->func)(gps_msg, nmea_msg_t);
				break;
			}
	}
}
/********************************************************************
 Parse sentence until the next comma delimited field.
 param : buffer  Current location in the NMEA sentence
*********************************************************************/
void nmea_parse_next_field(const char **buffer, char seperator)
{
	while (NMEA_CURRENT_TOKEN(buffer) != seperator)
		NMEA_NEXT_TOKEN(buffer);

	NMEA_NEXT_TOKEN(buffer);
}
/********************************************************************/
static bool nmea_parse_gpgsa(const char *buffer, NMEA_MSG_T *data)
{
	bool b_parseSuccess = true;
	int32_t temp_int, temp_int2;
	uint8_t i;
	char temp_char;


	data->type = (enum nmea_data_type)NMEA_TYPE_GPGSA;

	nmea_parse_next_field(&buffer, ',');

	b_parseSuccess &= nmea_parse_character(&buffer, &temp_char);
	data->nmea_msg_items_t.gpgsa.mode1 = temp_char;

	nmea_parse_next_field(&buffer, ',');

	b_parseSuccess &= nmea_parse_int(&buffer, -1, &temp_int);
	data->nmea_msg_items_t.gpgsa.mode2 = temp_int;

	nmea_parse_next_field(&buffer, ',');

	for (i = 0; i < sizeof(data->nmea_msg_items_t.gpgsa.satellite) / sizeof(data->nmea_msg_items_t.gpgsa.satellite[0]); i++) {
		b_parseSuccess &= nmea_parse_int(&buffer, -1, &temp_int);
		data->nmea_msg_items_t.gpgsa.satellite[i] = temp_int;

		nmea_parse_next_field(&buffer, ',');
	}

	b_parseSuccess &= nmea_parse_fixed_point(&buffer, &temp_int, &temp_int2);

	if(b_parseSuccess){
		data->nmea_msg_items_t.gpgsa.pdop_int = temp_int;
		data->nmea_msg_items_t.gpgsa.pdop_frac = temp_int2;
	}
	nmea_parse_next_field(&buffer, ',');

	b_parseSuccess &= nmea_parse_fixed_point(&buffer, &temp_int, &temp_int2);

	data->nmea_msg_items_t.gpgsa.hdop_int = temp_int;
	data->nmea_msg_items_t.gpgsa.hdop_frac = temp_int2;

	nmea_parse_next_field(&buffer, ',');

	b_parseSuccess &= nmea_parse_fixed_point(&buffer, &temp_int, &temp_int2);

	data->nmea_msg_items_t.gpgsa.vdop_int = temp_int;
	data->nmea_msg_items_t.gpgsa.vdop_frac = temp_int2;


	return b_parseSuccess;
}
/*****************************************************************/
static bool nmea_parse_gprmc(const char *buffer, NMEA_MSG_T * gps_data)
{
	bool b_parseSuccess = true;
	int32_t temp_int;
	int32_t temp_int2;
	char temp_char;


	gps_data->type = (enum nmea_data_type)NMEA_TYPE_GPRMC;

	nmea_parse_next_field(&buffer, ',');

	b_parseSuccess = nmea_parse_int(&buffer, 2, &temp_int);
	if(b_parseSuccess)
		gps_data->nmea_msg_items_t.gprmc.utc_hour = temp_int;

	b_parseSuccess = nmea_parse_int(&buffer, 2, &temp_int);
	if(b_parseSuccess)
		gps_data->nmea_msg_items_t.gprmc.utc_minute = temp_int;

	b_parseSuccess = nmea_parse_int(&buffer, 2, &temp_int);
	if(b_parseSuccess)
		gps_data->nmea_msg_items_t.gprmc.utc_second = temp_int;

	nmea_parse_next_field(&buffer, ',');

	b_parseSuccess = nmea_parse_character(&buffer, &temp_char);

	if(b_parseSuccess)
		gps_data->nmea_msg_items_t.gprmc.status = (NMEA_GPRMC_STATUS_T)temp_char;

	nmea_parse_next_field(&buffer, ',');

	b_parseSuccess = nmea_parse_fixed_point(&buffer, &temp_int, &temp_int2);
	/* parsing latitude */
	if(b_parseSuccess){
		gps_data->nmea_msg_items_t.gprmc.coords.latitude.degrees      = temp_int / 100;
		gps_data->nmea_msg_items_t.gprmc.coords.latitude.minutes      = temp_int % 100;
		gps_data->nmea_msg_items_t.gprmc.coords.latitude.minutes_frac = temp_int2;
	}

/*	PRINT_K("******************");
	itoa(gps_data->nmea_msg_items_t.gprmc.coords.latitude.degrees, buff,10);
	PRINT_K(buff);
	itoa(gps_data->nmea_msg_items_t.gprmc.coords.latitude.minutes, buff,10);
		PRINT_K(buff);
		itoa(gps_data->nmea_msg_items_t.gprmc.coords.latitude.minutes_frac, buff,10);
			PRINT_K(buff);
			PRINT_K("**********************");*/
	/* parsing latitude indicator*/
	nmea_parse_next_field(&buffer, ',');
	b_parseSuccess = nmea_parse_character(&buffer, &temp_char);
	if(b_parseSuccess)
		gps_data->nmea_msg_items_t.gprmc.coords.latitude.indicator = (enum nmea_gps_coord_indicator)temp_char;

    /* parsing Longitude */
	nmea_parse_next_field(&buffer, ',');
	b_parseSuccess = nmea_parse_fixed_point(&buffer, &temp_int, &temp_int2);

	if(b_parseSuccess){
		gps_data->nmea_msg_items_t.gprmc.coords.longitude.degrees      = temp_int / 100;
		gps_data->nmea_msg_items_t.gprmc.coords.longitude.minutes      = temp_int % 100;
		gps_data->nmea_msg_items_t.gprmc.coords.longitude.minutes_frac = temp_int2;
	}

/*	PRINT_K("**********aaa********");
	PRINT_K("**********aaa********");
		itoa(gps_data->nmea_msg_items_t.gprmc.coords.longitude.degrees, buff,10);
		PRINT_K(buff);
		itoa(gps_data->nmea_msg_items_t.gprmc.coords.longitude.minutes, buff,10);
			PRINT_K(buff);
			itoa(gps_data->nmea_msg_items_t.gprmc.coords.longitude.minutes_frac, buff,10);
				PRINT_K(buff);
				PRINT_K("*********aaa*************");*/
	/* parsing longtitude indicator*/
	nmea_parse_next_field(&buffer, ',');
	b_parseSuccess = nmea_parse_character(&buffer, &temp_char);

	if(b_parseSuccess)
		gps_data->nmea_msg_items_t.gprmc.coords.longitude.indicator = (enum nmea_gps_coord_indicator)temp_char;

	/* parsing speed*/
	nmea_parse_next_field(&buffer, ',');

	b_parseSuccess = nmea_parse_fixed_point(&buffer, &temp_int, &temp_int2);

	if(b_parseSuccess){
		gps_data->nmea_msg_items_t.gprmc.speed      = temp_int;
		gps_data->nmea_msg_items_t.gprmc.speed_frac = temp_int2;
	}

	/* parsing course over ground*/
	nmea_parse_next_field(&buffer, ',');
	b_parseSuccess = nmea_parse_fixed_point(&buffer, &temp_int, &temp_int2);
	if(b_parseSuccess){
		gps_data->nmea_msg_items_t.gprmc.course      = temp_int;
		gps_data->nmea_msg_items_t.gprmc.course_frac = temp_int2;
	}

	/* parsing date*/
	nmea_parse_next_field(&buffer, ',');

	b_parseSuccess = nmea_parse_int(&buffer, 2, &temp_int);

	if(b_parseSuccess)
		gps_data->nmea_msg_items_t.gprmc.day = temp_int;

	b_parseSuccess = nmea_parse_int(&buffer, 2, &temp_int);

	if(b_parseSuccess)
		gps_data->nmea_msg_items_t.gprmc.month = temp_int;

	b_parseSuccess = nmea_parse_int(&buffer, 2, &temp_int);
	if(b_parseSuccess)
		gps_data->nmea_msg_items_t.gprmc.year = temp_int;

	return b_parseSuccess;
}
/****************************************************************************/
static bool nmea_parse_gpgga(const char *buffer, NMEA_MSG_T * gps_data)
{
	bool b_parseSuccess = true;
	int32_t temp_int;
	gps_data->type = (enum nmea_data_type)NMEA_TYPE_GPGGA;
	/* parsing time */
	nmea_parse_next_field(&buffer, ',');

/*	b_parseSuccess &= nmea_parse_int(&buffer, 2, &temp_int);
	gps_data->nmea_msg_items_t.gpgga.utc_hour = temp_int;
	b_parseSuccess &= nmea_parse_int(&buffer, 2, &temp_int);
	gps_data->nmea_msg_items_t.gpgga.utc_minute = temp_int;
	b_parseSuccess &= nmea_parse_int(&buffer, 2, &temp_int);
	gps_data->nmea_msg_items_t.gpgga.utc_second = temp_int;
*/
    /* parsing latitude*/
	nmea_parse_next_field(&buffer, ',');

/*	b_parseSuccess &= nmea_parse_fixed_point(&buffer, &temp_int, &temp_int2);
	if(b_parseSuccess){
		gps_data->nmea_msg_items_t.gpgga.coords.latitude.degrees      = temp_int / 100;
		gps_data->nmea_msg_items_t.gpgga.coords.latitude.minutes      = temp_int % 100;
		gps_data->nmea_msg_items_t.gpgga.coords.latitude.minutes_frac = temp_int2;
	}
*/
	/* parsing latitude indicator*/
	nmea_parse_next_field(&buffer, ',');

/*	b_parseSuccess &= nmea_parse_character(&buffer, &temp_char);
	if(b_parseSuccess)
		gps_data->nmea_msg_items_t.gpgga.coords.latitude.indicator = (enum nmea_gps_coord_indicator)temp_char;
*/
    /* parsing Longitude */
	nmea_parse_next_field(&buffer, ',');

/*	b_parseSuccess &= nmea_parse_fixed_point(&buffer, &temp_int, &temp_int2);
	if(b_parseSuccess){
		gps_data->nmea_msg_items_t.gpgga.coords.longitude.degrees      = temp_int / 100;
		gps_data->nmea_msg_items_t.gpgga.coords.longitude.minutes      = temp_int % 100;
		gps_data->nmea_msg_items_t.gpgga.coords.longitude.minutes_frac = temp_int2;
	}
*/
	/* parsing longtitude indicator*/
	nmea_parse_next_field(&buffer, ',');

/*	b_parseSuccess &= nmea_parse_character(&buffer, &temp_char);
	if(b_parseSuccess)
		gps_data->nmea_msg_items_t.gpgga.coords.longitude.indicator = (enum nmea_gps_coord_indicator)temp_char;
*/
	/* parsing fix position*/
	nmea_parse_next_field(&buffer, ',');

	b_parseSuccess &= nmea_parse_int(&buffer, -1, &temp_int);
	if(b_parseSuccess)
		gps_data->nmea_msg_items_t.gpgga.position_fix = temp_int;


	/* parsing number of satellites field*/
	nmea_parse_next_field(&buffer, ',');

	b_parseSuccess &= nmea_parse_int(&buffer, -1, &temp_int);
	if(b_parseSuccess)
		gps_data->nmea_msg_items_t.gpgga.satellites = temp_int;

	/* Horizontal Dilution Of Precision is not used. Do a dummy read */
/*	nmea_parse_next_field(&buffer, ',');*/

	/* parsing altitude*/
/*	nmea_parse_next_field(&buffer, ',');

	b_parseSuccess &= nmea_parse_int(&buffer, 2, &temp_int);
	if(b_parseSuccess)
		gps_data->nmea_msg_items_t.gpgga.altitude = temp_int;*/

	return b_parseSuccess;
}
/*****************************************************************************/
/* Parse the current integer field value.
 *
 * buffer      [in, out]  Current location in the NMEA sentence
 * max_length  [in}       Maximum length of the  integer
 * out         [out]      Location of the parsed integer
 *
 * ***************************************************************************/
static bool nmea_parse_int(const char **buffer, int8_t max_length, int32_t *const out)
{
	int32_t parsed_value = 0;

	while (isdigit(NMEA_CURRENT_TOKEN(buffer)) && max_length--) {
		parsed_value = (parsed_value * 10) + (NMEA_CURRENT_TOKEN(buffer) - '0');
		NMEA_NEXT_TOKEN(buffer);
	}

	*out = parsed_value;
	return true;
}
/*****************************************************************************/
/* Parse the current character field value.
 *
 *  buffer [in, out] Current location in the NMEA sentence
 *  out    [out]     Location of the parsed character
 *
 *  return bool  true if the field was parsed successfully.
 *
 ***************************************************************************/
static bool nmea_parse_character(const char **buffer, char *const out)
{
	char parsed_char   = '\0';
	bool b_parseSuccess = false;

	if (isupper(NMEA_CURRENT_TOKEN(buffer))) {
		parsed_char   = NMEA_CURRENT_TOKEN(buffer);
		b_parseSuccess = true;
	}
//	NMEA_NEXT_TOKEN(buffer);

	*out = parsed_char;

	return b_parseSuccess;
}
/***************************************************************************/
/* Parse the current fixed point X.Y field value.
 *
 *  buffer          [in, out]   Current location in the NMEA sentence
 *  out_whole       [out]       Location of the parsed integer portion
 *  out_fractional  [out]       Location of the parsed fractional portion
 *
 * return bool true if the field was parsed successfully.
 */
/***************************************************************************/
static bool nmea_parse_fixed_point(const char **buffer, int32_t *const out_whole, int32_t *const out_fractional)
{
	int32_t parsed_fractional = 0;
	int32_t parsed_whole      = 0;
	uint32_t i	              = 0;
	bool b_parseSuccess       = true;

	b_parseSuccess &= nmea_parse_int(buffer, -1, &parsed_whole);

	if(b_parseSuccess)
	{
		if (NMEA_CURRENT_TOKEN(buffer) != '.') {
			return false;
		}
		NMEA_NEXT_TOKEN(buffer);

		for (i = 10; i <= NMEA_FRACTIONAL_SCALER; i *= 10) {
			if (!isdigit(NMEA_CURRENT_TOKEN(buffer))){
				break;
			}
			else{
				parsed_fractional *= 10;
				parsed_fractional += (NMEA_CURRENT_TOKEN(buffer) - '0');
				NMEA_NEXT_TOKEN(buffer);
			}
		}

		if(i == 1000)
			parsed_fractional /= 10;

		*out_whole      = parsed_whole;
		*out_fractional = parsed_fractional;
	}
	return b_parseSuccess;
}
/*****************************************************************************/
/** Converts a latitude/longitude coordinate from Degrees, Minutes and
 *  Fractional Minutes to linear number of degrees scaled by
 *  GPS_POS_DEGREES_SCALER.
 *
 *   gps_coord          [in]     Raw DDMM.mmmm coordinate from a GPS module
 *   positive_indicator [in]     Indicator when the degrees is positive
 *
 *  return Input coordinate converted to a scaled number of linear degrees.
 ******************************************************************************/
static int32_t gps_convert_to_linear_degrees(
		       const struct nmea_gps_coord_val *const gps_coord,
			   const enum nmea_gps_coord_indicator positive_indicator)
{
	int32_t new_coordinate;
	/* Convert raw GPS latitude to linear floating point */
	new_coordinate  = (gps_coord->degrees) * GPS_POS_DEGREES_SCALER;
/*	PRINT_K("new_coordinate");
	itoa(new_coordinate, buffer,10);
	PRINT_K(buffer);*/

	new_coordinate += (gps_coord->minutes *  GPS_POS_DEGREES_SCALER) / 60;
/*	PRINT_K("new_coordinate");
		itoa(new_coordinate, buffer,10);
		PRINT_K(buffer);*/
	new_coordinate += (gps_coord->minutes_frac*10) / 60;
/*	PRINT_K("new_coordinate");
		itoa(new_coordinate, buffer,10);
		PRINT_K(buffer);*/

	/* Negate converted coordinate if the orientation is negative */
	if (gps_coord->indicator != positive_indicator) {
		new_coordinate = -new_coordinate;
		}

	return new_coordinate;
}
/**********************************************************************************/
double gps_calculate_distance(int32_t i_prevLat, int32_t i_currLat, int32_t i_prevLon, int32_t i_currLon)
{
	double f_temp1 = 0;
	double f_temp2 = 0;
	double R = 6371000;	    /* Convert ddMM to degrees*/

	if((i_prevLat == 0) || (i_currLat == 0) || (i_prevLon == 0) || (i_currLon == 0))
		return 0;


	double d_lat = (double)(i_currLat - i_prevLat) * 0.0174532925 / (100000);    /* to radian*/
	double d_lon = (double)(i_currLon - i_prevLon) * 0.0174532925 / (100000);    /* to radian*/

	f_temp1 = (double)i_currLat * 0.0174532925 / (100000);
	f_temp2 = (double)i_currLat * 0.0174532925 / (100000);

	double a = sin(d_lat/2) * sin(d_lat/2) + sin(d_lon/2) * sin(d_lon/2) * cos(f_temp1) * cos(f_temp2);
	double c = 2 * atan2(sqrt(a), sqrt(1-a));

	return (R * c);
}
/************************************************************************/
void Get_RMCInfo(RMC_MESSAGE_T *rmc_info)
{
	memcpy(rmc_info, &nmea_msg_t.nmea_msg_items_t.gprmc, sizeof(RMC_MESSAGE_T));
}
/*************************************************************************/
void Get_GSAInfo(GSA_MESSAGE_T *gsa_info)
{
	*gsa_info = nmea_msg_t.nmea_msg_items_t.gpgsa;
}
/*************************************************************************/
void Get_GGAInfo(GGA_MESSAGE_T *gga_info)
{
	*gga_info = nmea_msg_t.nmea_msg_items_t.gpgga;
}
/*************************************************************************/
void Get_PositionInfo(GPS_POSITION_DATA_T *const position_info)
{
	*position_info = current_position;
}
/***************************************************************************/
void Init_PositionInfo()
{
	memset(&current_position, 0, sizeof(current_position));
	memset(&prev_position, 0, sizeof(prev_position));
}
/****************************************************************************/
void gps_init_info()
{

/*	memset(gps_rxbuff, 0, GPS_UART_RRB_SIZE);
	memset(gps_txbuff, 0, GPS_UART_SRB_SIZE);
	memset(&gps_txring, 0, sizeof(gps_txring));
	memset(&gps_rxring, 0, sizeof(gps_rxring));
	memset(&current_position, 0, sizeof(current_position));
	memset(&prev_position, 0, sizeof(prev_position));
	memset(&nmea_msg_t, 0 , sizeof(nmea_msg_t));
	f_kmTempCounter = 0 ;
	f_distance = 0;*/
}
/********************************************************/
bool ifKmRecordLimitExceeded()
{
	if(f_kmTempCounter >= FLASH_KM_UPDATE_DISTANCE)
	{
		//PRINT_INT((int)f_kmTempCounter);
		f_kmTempCounter = f_kmTempCounter - FLASH_KM_UPDATE_DISTANCE;
		return TRUE;
	}
	else
		return FALSE;
}
/*********************************************************/
void gps_send_mtk_command(const char *command)
{
	PRINT_K(command);
	Chip_UART_SendRB(GPS_PORT, &gps_txring, command, strlen(command));
}
/********************************************************/
bool is_moving()
{
	NMEA_MSG_T *gps_info = &nmea_msg_t;

	if((gps_info->nmea_msg_items_t.gprmc.speed *1852/1000 > 10) &&
	   (gps_info->nmea_msg_items_t.gpgga.position_fix) &&
	   (gps_info->nmea_msg_items_t.gpgga.satellites >= MIN_NUMBER_OF_SATS_FOR_MOVING_NOT_IGNITED))
		return TRUE;
	else
		return FALSE;
}
/********************************************************/
void gps_set_led_status(bool status)
{
	Chip_GPIO_SetPinState(LPC_GPIO, P_LED_GPS_GPIO_PORT_NUM, P_LED_GPS_GPIO_PIN_NUM, status);
}
/********************************************************/
void gps_set_nmea_msg_freq(uint16_t nmea_output_freq)
{

	PRINT_K("\nSetting NMEA frequency\n");
	Delay(100,NULL);
	gps_send_mtk_command("$PMTK251,115200*1F\r\n");    /* set baud rate to 115200 bps */
	Delay(100,NULL);
	gps_init(GPS_BAUDRATE_10HZ);
	gps_send_mtk_command("$PMTK220,100*2F\r\n");        /* set nmea sentence rate to 100 ms*/
}
/********************************************************/
void check_sudden_acceleration_by_gps_speed(uint16_t current_speed)
{
	static G_ALARM_INFO g_alarm;
	static uint16_t prev_speed = 0;
	char printBuf[128];
	bool success = FALSE;

	if((current_speed - prev_speed) /2.7 > SUDDEN_ACCL_THRESHOLD_G_VALUE){
		g_alarm.initial_speed = prev_speed;
		g_alarm.final_speed = current_speed;
		g_alarm.alarm_exist = true;
		strcpy(g_alarm.alarm_str, "SAC");
		success=push_g_alarm(&g_alarm);
		if(success){
			sprintf(printBuf,"\nAlarm!!!! Başlangıç hızı %d Son Hız %d\n", g_alarm.initial_speed,
																	       g_alarm.final_speed);
			PRINT_G(printBuf);
		}

	}
	prev_speed = current_speed;
}
/********************************************************/
void check_sudden_deacceleration_by_gps_speed(uint16_t current_speed)
{
	static G_ALARM_INFO g_alarm;
	current_speed = 20;
	static uint16_t prev_speed = 22;
	char printBuf[256];
	bool success = FALSE;
	sprintf(printBuf,"\nCurrent %f\n Prev %f\n Diff: %f\n",((float)current_speed*1000)/3600, ((float)prev_speed*1000)/3600,((float)(current_speed - prev_speed)/3.6));
	PRINT_G(printBuf);
		if(((float)(current_speed - prev_speed) /2.7) < SUDDEN_STOP_THRESHOLD_G_VALUE){
			sprintf(printBuf,"\nALARMMMMMMM\n");
			PRINT_G(printBuf);
			g_alarm.initial_speed = prev_speed;
			g_alarm.final_speed = current_speed;
			g_alarm.alarm_exist = true;
			strcpy(g_alarm.alarm_str, "SST");
			success=push_g_alarm(&g_alarm);
			if(success){
				sprintf(printBuf,"\nAlarm!!!! Initial speed %d Final Speed %d\n", g_alarm.initial_speed,
																			   g_alarm.final_speed);
				PRINT_G(printBuf);
			}

		}
		prev_speed = current_speed;
}
