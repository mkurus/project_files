#include "chip.h"
#include "board.h"
#include "bsp.h"
#include "io_ctrl.h"
#include "settings.h"
#include "timer.h"
#include "ProcessTask.h"
#include "trace.h"
#include "can.h"
#include <ctype.h>
#include <math.h>
#include <string.h>
#include <stdlib.h>

/* Pin and port definitions for CAN1 port */
#define CAN_RD1_PORT_NUM      0
#define CAN_TD1_PORT_NUM      0
#define CAN_RD1_PIN_NUM       0
#define CAN_TD1_PIN_NUM       1

/* Pin and port definitions for CAN2 port */
#define CAN_RD2_PORT_NUM      2
#define CAN_TD2_PORT_NUM      2
#define CAN_RD2_PIN_NUM       7
#define CAN_TD2_PIN_NUM       8

/* PGN definitions:
 * 0xFEE9: Fuel consumption
 * 0xFEC1: High resolution vehicle distance
 * 0xFEF1: Cruise control/vehicle speed
 * 0xFEE5: Engine hours, Revolutions
 * 0xFEFC: Dash display
 * 0xF004: Electronic Engine Controller #1
 * 0xF003: Electronic Engine Controller #2
 * 0xFEEF: Engine Fluid Level/Pressure  #1
 * 0xFEF5: Ambient Conditions
 * 0xFE6C: Tachograph
 * 0xFEEE: Engine Temperature #1
 */
const uint32_t can1_mask_11bit[CAN_MASK_COUNT] = { 0x250, 0x251, 0x254, 0x22D, 0x361, 0x3B5, 0x3EC, 0x450, 0x65F, 0x6A0, 0x6A5, 0x6A6, 0x6B5 };
const uint32_t can2_mask_11bit[CAN_MASK_COUNT] = { 0x250, 0x251, 0x254, 0x22D, 0x361, 0x3B5, 0x3EC, 0x450, 0x65F, 0x6A0, 0x6A5, 0x6A6, 0x6B5 };

const uint32_t can1_mask_29bit[CAN_MASK_COUNT] = { 0xFEE9, 0xFEC1, 0xFEF1, 0xFEE5, 0xFEFC,0xF004, 0xF003, 0xFEEF, 0xFEF5, 0xFE6C, 0xFEEE };
const uint32_t can2_mask_29bit[CAN_MASK_COUNT] = { 0xFEE9, 0xFEC1, 0xFEF1, 0xFEE5, 0xFEFC,0xF004, 0xF003, 0xFEEF, 0xFEF5, 0xFE6C, 0xFEEE };

uint32_t CAN1ErrCount = 0;
uint32_t CAN2ErrCount = 0;

volatile uint32_t CAN1_RxCount = 0;
volatile uint32_t CAN2_RxCount = 0;

volatile uint32_t b_can1RxDone = FALSE;
volatile uint32_t b_can2RxDone = FALSE;

/* TX and RX Buffers for CAN message */
CAN_MSG MsgBuf_RX1[CAN_BUFFER_SIZE];
CAN_MSG MsgBuf_RX2[CAN_BUFFER_SIZE];

CAN_MSG can1_data[CAN_MASK_COUNT];                      /* Can data fields are 8 byte.*/
CAN_MSG can2_data[CAN_MASK_COUNT];                      /* Can data fields are 8 byte.*/

TIMER_INFO_T CAN_DATA_TRACE_TIMER;

bool is_can_transmitted = FALSE;
bool isCanRead = FALSE;
uint32_t const *can_mask_ptr;
static const PINMUX_GRP_T T2_CanPortMuxTable[] = {

	{CAN_RD1_PORT_NUM,  CAN_RD1_PIN_NUM,  IOCON_MODE_PULLUP | IOCON_FUNC1},	/* configure CAN1 RD pin */
	{CAN_TD1_PORT_NUM,  CAN_TD1_PIN_NUM,  IOCON_MODE_PULLUP | IOCON_FUNC1},	/* configure CAN1 TD pin */
	{CAN_RD2_PORT_NUM,  CAN_RD2_PIN_NUM,  IOCON_MODE_PULLUP | IOCON_FUNC1},	/* configure CAN2 RD pin */
	{CAN_TD2_PORT_NUM,  CAN_TD2_PIN_NUM,  IOCON_MODE_PULLUP | IOCON_FUNC1},	/* configure CAN2 TD pin */
};

bool can_init()
{
	FLASH_SETTINGS_T settings;

	settings_read_user_settings(&settings);

	Chip_IOCON_SetPinMuxing(LPC_IOCON, T2_CanPortMuxTable, sizeof(T2_CanPortMuxTable) / sizeof(PINMUX_GRP_T));
	/*enable peripheral clocks*/
	Chip_Clock_EnablePeriphClock(SYSCTL_PCLK_CAN1);
	Chip_Clock_EnablePeriphClock(SYSCTL_PCLK_CAN2);
	Chip_Clock_EnablePeriphClock(SYSCTL_PCLK_ACF);

	LPC_CAN1->MOD = LPC_CAN2->MOD = 1;    /* Reset CAN */
	LPC_CAN1->IER = LPC_CAN2->IER = 0;    /* Disable Receive Interrupt */
	LPC_CAN1->GSR = LPC_CAN2->GSR = 0;    /* Reset error counter when CANxMOD is in reset	*/

	/* LPC_CAN1->BTR = LPC_CAN2->BTR = can_btr;
	LPC_CAN1->BTR = LPC_CAN2->BTR = can_btr;*/
	if(settings.canBusBitrate == CAN_BUSSPEED_250K){
		Chip_CAN_SetBitRate(LPC_CAN1, 250000);
		Chip_CAN_SetBitRate(LPC_CAN2, 250000);
	}
	else {
		Chip_CAN_SetBitRate(LPC_CAN1, 500000);
		Chip_CAN_SetBitRate(LPC_CAN2, 500000);
	}
	if(settings.canBusFrameType == CAN_EXT_FRAME)
		can_mask_ptr = can1_mask_29bit;
	else
		can_mask_ptr = can1_mask_11bit;

	LPC_CAN1->MOD = LPC_CAN2->MOD = 0x0;  /* CAN in normal operation mode */

	NVIC_EnableIRQ(CAN_IRQn);
	LPC_CAN1->IER = LPC_CAN2->IER = 0x01; /* Enable receive interrupts */

	b_can1RxDone = b_can2RxDone = FALSE;

	can_set_accf(ACCF_ON);
	PRINT_K("\nCAN Interface Initialized\n");
	return  TRUE;
}

/******************************************************************************
** Function name:		CAN_SetACCF
**
** Descriptions:		Set acceptance filter and SRAM associated with
**
** parameters:			ACMF mode
** Returned value:		None
**
**
******************************************************************************/
void can_set_accf(ACCF_MODE ACCFMode)
{
  switch (ACCFMode)
  {
	case ACCF_OFF:
	  LPC_CANAF->AFMR = ACCFMode;
	  LPC_CAN1->MOD = LPC_CAN2->MOD = 1;	// Reset CAN
	  LPC_CAN1->IER = LPC_CAN2->IER = 0;	// Disable Receive Interrupt
	  LPC_CAN1->GSR = LPC_CAN2->GSR = 0;	// Reset error counter when CANxMOD is in reset
	break;

	case ACCF_BYPASS:
	  LPC_CANAF->AFMR = ACCFMode;
	break;

	case ACCF_ON:
	case ACCF_FULLCAN:
	  LPC_CANAF->AFMR = ACCF_OFF;
	  CAN_SetACCF_Lookup();
	  LPC_CANAF->AFMR = ACCFMode;
	break;

	default:
	break;
  }
  return;
}

void CAN_Task()
{
	bool isCanRead;
	uint8_t canChNum;

	for(canChNum = 0; canChNum< NUMBER_OF_CAN_PORTS; canChNum++){
		isCanRead = ReadCanMsg(canChNum);
		if (isCanRead) {
			/*if (STT_Value - last_uart_transmit > 5000)*/
			if (mn_timer_expired(&CAN_DATA_TRACE_TIMER)){    /*Transmit every 5 seconds.*/
				if (is_can_transmitted == FALSE){
					if (!isCanRead) {
					/*	LPC_GPIO1->FIOPIN &= ~(1 << 18);*/
					} else {
						/*TraceCanDataOverUart(PortNum);*/
						//PRINT_K("\r\n");
						is_can_transmitted = TRUE;
						/*if (ledVal > 0) {
							LPC_GPIO1->FIOPIN &= ~(1 << P_LED_BUS);
							ledVal = 0;
						} else {
							LPC_GPIO1->FIOPIN |= (1 << P_LED_BUS);
							ledVal = 1;
						}*/
					}
				} else {
				/*	TraceDrivingBehaviourOverUart();*/
					is_can_transmitted = FALSE;
				}
				Set_Timer(&CAN_DATA_TRACE_TIMER, CAN_DATA_TRACE_INTERVAL);
			/*	last_uart_transmit = STT_Value;*/
			}
		}
	}
	/*int uartRx1Len = ReadUart(msg,1);
	if (uartRx1Len > 0)
		UARTSend(0,msg,uartRx1Len);*/


}
/*******************************************************/
bool can_get_presence_status()
{
	if(b_can1RxDone)
		return TRUE;
	else
		return FALSE;
}
/*******************************************************/
bool ReadCanMsg(uint8_t canChNum)
{
	bool result;
/*	PRINT_K("Entered ReadCanMsg");*/
	switch(canChNum){
		case 0:
		result = ReadCanCh1Msg();
		break;

		case 1:
		result = ReadCanCh2Msg();
		break;
	}
	return result;
}
/*******************************************************/
bool  ReadCanCh1Msg()
{
	uint32_t msg_id;
	int32_t msg_count;
	int32_t i, j;
	char buffer[80];
	bool isRead = FALSE;

	if (b_can1RxDone) {
		b_can1RxDone = FALSE;
		isRead = TRUE;

		sprintf(buffer, "\n%d CAN Messages Received on Bus 1\n", (int)CAN1_RxCount);
		//PRINT_K(buffer);

		msg_count = CAN1_RxCount;
		if (msg_count > CAN_BUFFER_SIZE)
			msg_count = CAN_BUFFER_SIZE;

		for (j = 0; j < CAN_MASK_COUNT; j++) {
			if (can_mask_ptr[j] > 0) {
				for (i = msg_count - 1; i >= 0; i--) {

					if (MsgBuf_RX1[i].MsgID > 0x7FF)
						msg_id = ((MsgBuf_RX1[i].MsgID >> 8) & 0xFFFF); /*  MsgID >> 8 & 0xFFFF*/
					else
						msg_id = MsgBuf_RX1[i].MsgID & 0x7FF;


				/*	sprintf(buffer,"\nREAD CAN MSG:::::Msg ID : %x\n", (msg_id));
					PRINT_K(buffer);*/

					uint32_t dataA1 = ((MsgBuf_RX1[i].DataA >> 0x18) & 0xFF);
					uint32_t dataA2 = (((MsgBuf_RX1[i].DataA >> 0x10) & 0xFF));
					uint32_t dataA3 = (((MsgBuf_RX1[i].DataA >> 0x8) & 0xFF));
					uint32_t dataA4 = ((MsgBuf_RX1[i].DataA & 0xFF));
					uint32_t dataB1 = ((MsgBuf_RX1[i].DataB >> 0x18) & 0xFF);
					uint32_t dataB2 = (((MsgBuf_RX1[i].DataB >> 0x10) & 0xFF));
					uint32_t dataB3 = (((MsgBuf_RX1[i].DataB >> 0x8) & 0xFF));
					uint32_t dataB4 = (MsgBuf_RX1[i].DataB & 0xFF);

					sprintf(buffer,
							"\n%02x%02x%02x%02x%02x%02x%02x%02x\n", dataA4,
							dataA3, dataA2, dataA1, dataB4, dataB3, dataB2,dataB1);

				//	PRINT_K(buffer);

					//TraceCanMsg(MsgBuf_RX1[i]);
					if (can_mask_ptr[j] == msg_id) {
						can1_data[j].DataA = MsgBuf_RX1[i].DataA;
						can1_data[j].DataB = MsgBuf_RX1[i].DataB;
						//can1_data[j].MsgID = MsgBuf_RX1[i].MsgID;
						can1_data[j].Frame = MsgBuf_RX1[i].Frame;
						break;
					}
				}
			}
		}

		/* Everything is correct, reset buffer */
		memset(MsgBuf_RX1, 0, CAN_BUFFER_SIZE);
		CAN1_RxCount = 0;
	}
		return isRead;
}
bool ReadCanCh2Msg()
{
	uint32_t msg_id;
	int32_t msg_count;
	int32_t i, j;
	char buffer[80];
	bool isRead = FALSE;

	if (b_can2RxDone) {
		b_can2RxDone = FALSE;
		isRead = TRUE;

		sprintf(buffer, "\n%d Can Messages Received on Bus 2\n", CAN2_RxCount);
	//	PRINT_K(buffer);

		msg_count = CAN2_RxCount;

		if (msg_count > CAN_BUFFER_SIZE)
			msg_count = CAN_BUFFER_SIZE;

		for (j = 0; j < CAN_MASK_COUNT; j++) {
				if (can_mask_ptr[j] > 0) {
					for (i = msg_count - 1; i >= 0; i--) {

						if (MsgBuf_RX2[i].MsgID > 0x7FF)
							msg_id = ((MsgBuf_RX2[i].MsgID >> 8) & 0xFFFF); /*  MsgID >> 8 & 0xFFFF*/
						else
							msg_id = MsgBuf_RX2[i].MsgID & 0x7FF;
							sprintf(buffer,"\nREAD CAN MSG:::::Msg ID : %x\n", (msg_id));

					//	PRINT_K(buffer);

						uint32_t dataA1 = ((MsgBuf_RX2[i].DataA >> 0x18) & 0xFF);
						uint32_t dataA2 = (((MsgBuf_RX2[i].DataA >> 0x10) & 0xFF));
						uint32_t dataA3 = (((MsgBuf_RX2[i].DataA >> 0x8) & 0xFF));
						uint32_t dataA4 = ((MsgBuf_RX2[i].DataA & 0xFF));
						uint32_t dataB1 = ((MsgBuf_RX2[i].DataB >> 0x18) & 0xFF);
						uint32_t dataB2 = (((MsgBuf_RX2[i].DataB >> 0x10) & 0xFF));
						uint32_t dataB3 = (((MsgBuf_RX2[i].DataB >> 0x8) & 0xFF));
						uint32_t dataB4 = (MsgBuf_RX2[i].DataB & 0xFF);

						sprintf(buffer,
								"%02x%02x%02x%02x%02x%02x%02x%02x\n", dataA4,
								dataA3, dataA2, dataA1, dataB4, dataB3, dataB2,
								dataB1);

					//	PRINT_K(buffer);

						//TraceCanMsg(MsgBuf_RX1[i]);
						if (can_mask_ptr[j] == msg_id) {
							can2_data[j].DataA = MsgBuf_RX2[i].DataA;
							can2_data[j].DataB = MsgBuf_RX2[i].DataB;
							//can1_data[j].MsgID = MsgBuf_RX1[i].MsgID;
							can2_data[j].Frame = MsgBuf_RX2[i].Frame;
							break;
						}
					}
				}
			}

		/*	last_check_time = STT_Value / 100;*/

			//UARTSend(PortNum, buffer, count);
		/*	sprintf(buffer, "Time : %d\r\n", STT_Value / 1000);
			PRINT_K(buffer);*/

			/* Everything is correct, reset buffer */
			memset(MsgBuf_RX2, 0, CAN_BUFFER_SIZE);
			CAN2_RxCount = 0;
	}
	return isRead;

}
/*****************************************************************************/
void  CAN_IRQHandler(void)
{
	volatile uint32_t CANRxStatus;

	CANRxStatus = LPC_CANCR->RXSR;

	if (CANRxStatus & (1 << 8)){
	//	PRINT_K("Interrupt from CAN1");
		CAN1_RxCount++;
		CAN_ISR_Rx1();
	}
	if (CANRxStatus & (1 << 9)){
	//	PRINT_K("Interrupt from CAN2");
		CAN2_RxCount++;
		CAN_ISR_Rx2();
	}
	if (LPC_CAN1->GSR & (1 << 6)){
	/* The error count includes both TX and RX */
		CAN1ErrCount = LPC_CAN1->GSR >> 16;
	}
	if (LPC_CAN2->GSR & (1 << 6 )){
	/* The error count includes both TX and RX */
		CAN2ErrCount = LPC_CAN2->GSR >> 16;
	}
	return;
}
/******************************************************************************
** Function name:		CAN_ISR_Rx1
**
** Descriptions:		CAN Rx1 interrupt handler
**
** parameters:			None
** Returned value:		None
**
******************************************************************************/
void CAN_ISR_Rx1(void)
{
	if (CAN1_RxCount < CAN_BUFFER_SIZE) {
		MsgBuf_RX1[CAN1_RxCount].Frame = LPC_CAN1->RX.RFS;  // Frame
		MsgBuf_RX1[CAN1_RxCount].MsgID = LPC_CAN1->RX.RID;   // ID
		MsgBuf_RX1[CAN1_RxCount].DataA = LPC_CAN1->RX.RD[0];   // Data A
		MsgBuf_RX1[CAN1_RxCount].DataB = LPC_CAN1->RX.RD[1];   // Data B
	}
	b_can1RxDone = TRUE;
	LPC_CAN1->CMR = 0x01 << 2;
	return;
}
/******************************************************************************
** Function name:		CAN_ISR_Rx2
**
** Descriptions:		CAN Rx2 interrupt handler
**
** parameters:			None
** Returned value:		None
**
******************************************************************************/
void CAN_ISR_Rx2(void)
{
	if (CAN2_RxCount < CAN_BUFFER_SIZE) {
		MsgBuf_RX2[CAN2_RxCount].Frame = LPC_CAN2->RX.RFS;    // Frame
		MsgBuf_RX2[CAN2_RxCount].MsgID = LPC_CAN2->RX.RID;  // ID
		MsgBuf_RX2[CAN2_RxCount].DataA = LPC_CAN2->RX.RD[0];   // Data A
		MsgBuf_RX2[CAN2_RxCount].DataB = LPC_CAN2->RX.RD[1];   // Data B
	}
	b_can2RxDone = TRUE;
	LPC_CAN2->CMR = 0x01 << 2;
	return;
}
/******************************************************************************
** Function name:		CAN_SetACCF_Lookup
******************************************************************************/
void CAN_SetACCF_Lookup(void)
{
  uint32_t address = 0;
  uint32_t i;
  uint32_t ID_high, ID_low;
  char printBuf[256];

	LPC_CANAF->ENDADDR[CANAF_RAM_SFF_SEC] = address;
  	/*  LPC_CANAF->SFF_sa = address;*/
  	  for (i = 0; i < ACCF_IDEN_NUM; i += 2 ){
  		  ID_low = (i << 29) | (EXP_STD_ID << 16);
  		  ID_high = ((i+1) << 13) | (EXP_STD_ID << 0);
  		  *((volatile uint32_t *)(LPC_CANAF_RAM_BASE + address)) = ID_low | ID_high;
  		/*  sprintf(printBuf,"\nCANAF_RAM_SFF_SEC : %X, %X\n", LPC_CANAF_RAM_BASE + address, ID_low | ID_high);
  		  PRINT_K(printBuf);*/
  		  address += 4;
  	  }

  	  /* Set group standard Frame */
  	LPC_CANAF->ENDADDR[CANAF_RAM_SFF_GRP_SEC] = address;
  	/*  LPC_CANAF->SFF_GRP_sa = address;*/
  	  for ( i = 0; i < ACCF_IDEN_NUM; i += 2 ){
  		  ID_low = (i << 29) | (GRP_STD_ID << 16);
  		  ID_high = ((i+1) << 13) | (GRP_STD_ID << 0);
  		  *((volatile uint32_t *)(LPC_CANAF_RAM_BASE + address)) = ID_low | ID_high;
  		  /* sprintf(printBuf,"\nCANAF_RAM_SFF_GRP_SEC: %X, %X\n", LPC_CANAF_RAM_BASE + address, ID_low | ID_high);
  		   PRINT_K(printBuf);*/
  		  address += 4;
  	  }

  	  /* Set explicit extended Frame */
  	LPC_CANAF->ENDADDR[CANAF_RAM_EFF_SEC] = address;
  /*	  LPC_CANAF->EFF_sa = address;*/
  	  for (i = 0; i < ACCF_IDEN_NUM; i++){
  		  ID_low = (i << 29) | (EXP_EXT_ID << 0);
  		  *((volatile uint32_t *)(LPC_CANAF_RAM_BASE + address)) = ID_low;
  		/* sprintf(printBuf,"\nCANAF_RAM_EFF_SEC: %X, %X\n", LPC_CANAF_RAM_BASE + address, ID_low | ID_high);
  		 PRINT_K(printBuf);*/
  		  address += 4;
  	  }

  	  /* Set group extended Frame */
      LPC_CANAF->ENDADDR[CANAF_RAM_EFF_GRP_SEC] = address;
  	 /* LPC_CANAF->EFF_GRP_sa = address;*/
  	  for (i = 0; i < ACCF_IDEN_NUM; i++){
  		  ID_low = (i << 29) | (GRP_EXT_ID << 0);
  		  *((volatile uint32_t *)(LPC_CANAF_RAM_BASE + address)) = ID_low;
  		/* sprintf(printBuf,"\nCANAF_RAM_EFF_GRP_SEC: %X, %X\n", LPC_CANAF_RAM_BASE + address, ID_low | ID_high);
  		 	 PRINT_K(printBuf);*/
  		  address += 4;
  	  }

  	  /* Set End of Table */
     LPC_CANAF->ENDADDR[CANAF_RAM_SECTION_NUM] = address;
  	 /* LPC_CANAF->ENDofTable = address;*/

  return;
}
/******************************************************************************/
void Get_CanMessageString(char * buffer, uint16_t length)
{
	int j =0;
	char temp[128];

	//memset(temp, 0, sizeof(temp));
	memset(buffer,0, length);

	for (j = 0; j < CAN_MASK_COUNT; j++) {
		if (can_mask_ptr[j] > 0){
			sprintf(temp,"%04X%08X%08X", can_mask_ptr[j],can1_data[j].DataA,can1_data[j].DataB);
			strcat(buffer, temp);
		/*	PRINT_K("\n******************\n");
			PRINT_K(temp);
			PRINT_K(buffer);
			PRINT_K("\n******************\n");*/
		}
	}
}
