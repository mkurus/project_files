/*
 * scale_task.c
 *
 *  Created on: 27 Åžub 2018
 *      Author: mkurus
 */

#include "chip.h"
#include "board.h"
#include "bsp.h"
#include "timer.h"
#include "settings.h"
#include "status.h"
#include "ProcessTask.h"
#include "trace.h"
#include <ctype.h>
#include <string.h>
#include <stdlib.h>
#include "din_task.h"
#include "scale_task.h"


bool GetEvent_ScaleTask(SCALE_TASK_EVENT_T *tEvent);
ScaleTask ScaleTask_t;
static int16_t scaleResetTimerId;

/**
 *
 */
bool GetEvent_ScaleTask(SCALE_TASK_EVENT_T *tEventContainer)
{
	if(ScaleTask_t.tEventQueue.u8_count){
		tEventContainer->sig = ScaleTask_t.tEventQueue.tEventBuffer[ScaleTask_t.tEventQueue.u8_readPtr].sig;
		tEventContainer->param1 = ScaleTask_t.tEventQueue.tEventBuffer[ScaleTask_t.tEventQueue.u8_readPtr].param1;
		/* decrement event counter*/
		ScaleTask_t.tEventQueue.u8_count--;
		/* check if reached end of queue */
		if (ScaleTask_t.tEventQueue.u8_readPtr >= SCALE_TASK_EVENT_QUE_SIZE - 1)
			ScaleTask_t.tEventQueue.u8_readPtr = 0;
		else
			ScaleTask_t.tEventQueue.u8_readPtr++;

		return true;
	}
	else
		return false;
}
/**
 *
 */
void PutEvent_ScaleTask(SCALE_TASK_EVENT_T *tEventContainer)
{
	if(ScaleTask_t.tEventQueue.u8_count < SCALE_TASK_EVENT_QUE_SIZE){
		ScaleTask_t.tEventQueue.u8_count++;

		ScaleTask_t.tEventQueue.tEventBuffer[ScaleTask_t.tEventQueue.u8_wrtPtr].sig = tEventContainer->sig;
		ScaleTask_t.tEventQueue.tEventBuffer[ScaleTask_t.tEventQueue.u8_wrtPtr].param1= tEventContainer->param1;
		if(ScaleTask_t.tEventQueue.u8_wrtPtr >= SCALE_TASK_EVENT_QUE_SIZE - 1)
			ScaleTask_t.tEventQueue.u8_wrtPtr = 0;
		else
			ScaleTask_t.tEventQueue.u8_wrtPtr++;
	}
	else  /* critical error  */{
		PRINT_K("\nCannot write event to ScaleTask\n");
		return;
	}

}
/*******************************************/
void scale_task_init()
{
	ScaleTask_t.tEventQueue.u8_count = 0;
	ScaleTask_t.tEventQueue.u8_readPtr = 0;
	ScaleTask_t.tEventQueue.u8_wrtPtr = 0;
	//scaleResetTimerId = Timer_Schedule(TIMER_TYPE_CONTINUOUS, SCALE_RESET_DELAY_TIMEOUT,  lora_msg_delay_callback, (void *)&param);
}
/*******************************************/
void task_scale()
{
	SCALE_TASK_EVENT_T event;


		if(GetEvent_ScaleTask(&event)){
			switch(ScaleTask_t.tTaskState){
			case SCALE_CALIBRATED_STATE:
				switch(event.sig){

					case SIGNAL_SCALE_START_CONVERSION:
					PRINT_K("\nConversion started\n");
					hx711_set_clk(false);
					break;

					case SIGNAL_SCALE_DATA_READY:
					PRINT_K("\nScale data ready\n");
					break;


					case SIGNAL_SCALE_CALIBRATE_M:
						ScaleTask_t.tTaskState = SCALE_NOT_CALIBRATED_STATE;
						break;

					case SIGNAL_SCALE_DATA_READY:
						break;
				}
				break;

			case SCALE_NOT_CALIBRATED_STATE:



				break;

			}
		}

}

