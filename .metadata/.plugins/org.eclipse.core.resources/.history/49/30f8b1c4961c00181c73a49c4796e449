/*
 * settings.h
 *
 *  Created on: 2 Mar 2016
 *      Author: admin
 */

#ifndef SETTINGS_H_
#define SETTINGS_H_

#ifndef TTYPES_H_
#include "ttypes.h"
#endif

#ifndef MESSAGES_H_
#include "messages.h"
#endif

#ifndef UTILS_H_
#include "utils.h"
#endif

#ifndef CAN_H_
#include "can.h"
#endif

#ifndef  RFID_H_
#include "rfid.h"
#endif

#ifndef   HX711_H_
#include "hx711.h"
#endif

#ifndef RF_TASK_H_
#include "rf_task.h"
#endif

#define TRIO_GET_COMMAND             "GET;INFO"
#define TRIO_CONFIG_WORD             "SET"
#define CONFIG_PARAM_SEPERATOR       ";"
#define TRANSACTION_ID_SEPERATOR     "!"

#define FLASH_SETTINGS_TABLE_BASE_ADDR    0x00000000
#define MAX_APN_NAME_LEN                  48
#define MAX_APN_USERNAME_LEN              24
#define MAX_APN_PASSWORD_LEN              24
#define MAX_SET_COMMAND_PSWD_LENGTH       12
#define MAX_SERVER_ADDR_LEN               128

#define NUMBER_OF_DIGITAL_INPUTS          6

typedef enum{
	DIN_CHANNEL_1 = 1,       /* falling edge triggered channel  */
	DIN_CHANNEL_2,           /* falling edge triggered channel  */
	DIN_CHANNEL_3,           /* falling edge triggered channel  */
	DIN_CHANNEL_4,           /* falling edge triggered channel  */
	DIN_CHANNEL_5,           /* rising edge triggered channel  */
	DIN_CHANNEL_6            /* rising edge triggered channel  */
}DIG_INPUT_CH_NUM;

typedef enum{
	DIN_FUNC_NOT_ASSIGNED,     /* standart digital input function. Send T message on state change */
	DIN_FUNC_SEND_SMS,         /* send SMS when triggered */
	DIN_FUNC_CALL,             /* initiate call when triggered */
	DIN_FUNC_SCALE,            /* configure as data input from scale */
	DIN_FUNC_COUNT
}DIG_INPUT_FUNC_T;

typedef struct {
/** Configuration of digital input function.
	 0 = standard digital input function,
	 1 = send sms on activation,
     2 = initiate call on activation,
     3 = data input pin for scale interface
*/
	DIG_INPUT_FUNC_T function;
	char destNumber[16];       			   /* destination GSM number  */
	char sms[64];                 		   /* SMS content */
}DIN_PROPERTIES_T;

typedef enum {
	COMMAND_SOURCE_SMS,
	COMMAND_SOURCE_TCP,
	COMMAND_SOURCE_UART
}COMMAND_SOURCE_T;


/*********************/
typedef enum{
	BLOCKAGE_NOT_EXIST,
	BLOCKAGE_REQUESTED,
	BLOCKAGE_REMOVE_REQUESTED,
	BLOCKAGE_ACTIVATED,
	BLOCKAGE_REMOVED
}BLOCKAGE_STATUS_T;
/*********************/
typedef struct BLOCKAGE_INFO
{
	COMMAND_SOURCE_T cmdSource;
	BLOCKAGE_STATUS_T blockageStatus;
	char transactionID[16];
}BLOCKAGE_INFO_T;
/*********************/
typedef enum {
	SERVER_AND_PORT_SETTING = 1,
	RESERVED1,
	RESERVED2,
	MESSAGE_PERIOD_SETTING,
	ROAMING_ACTIVATION,
	SMS_ACTIVATION,
	SPEED_LIMIT_SETTING,
	ENGINE_BLOCKAGE_SETTING,
	RESERVED3,
	RESERVED4,
	KM_COUNTER,
	DEVICE_RESET,
	RESERVED5,
	SEND_SMS,
	DEVICE_ID_SETTING,
	RESERVED6,
	RESERVED7,
	RESERVED8,
	DEVICE_STATUS_REQUEST,
	DIGITAL_INPUT_ALARM_SETTING,
	RESERVED9,
	UNCONTROLLED_ENGINE_BLOCKAGE,
	LOCATION_REQUEST,
	RESERVED10,
	APN_SETTING,
	ENGINE_OPERATION_SETTINGS,
	RFID_CHECK_SETTING,
	GARMIN_FMI_ACTIVATION,
	TEXT_MESSAGE_TO_GARMIN,
	RESERVED12,
	RESERVED13,
	CHANGE_PASSWORD,
	RESERVE_TABLET_PORT = 35,
	TEXT_MSG_FROM_SERVER = 36,
	TEXT_MSG_READ_ACK_FROM_SERVER = 37,
	GPS_BAUDRATE_SETTING = 40,
	CAN_BUSSPEED_SETTING = 400,
	CAN_FRAMETYPE_SETTING = 401,
	DIN_SETTING = 402,
	FIRMWARE_UPDATE_REQUEST = 503,
	IDLE_ALARM_SETTING = 600,
	GPS_COLD_RESTART = 1000,
	ERASE_EXT_FLASH = 1001,
	SET_BLOCKAGE_PERSISTANCE = 1002,
	ADD_RF_NODE,
	REMOVE_RF_NODE,
	LIST_RF_NODES,
	UPDATE_G_THRESHOLD,
	CALIBRATE_HX711
}COMMAND_TYPE_T;
/*********/
typedef enum {
	DEVICE_HEALT_STATUS,
	DEVICE_VERSION_INFO,
	DEVICE_CONFIG_INFO

}GET_COMMAND_TYPE;

/*********/
typedef struct SETTING_INFO
{
	COMMAND_TYPE_T command;
	COMMAND_RESULT_T (*update_callback)(char *buffer, COMMAND_RESPONSE_T *response);
}SETTING_INFO_T;
/********/
typedef struct GET_CMD_INFO
{
	GET_COMMAND_TYPE command;
	COMMAND_RESULT_T (*get_callback)(char *const buffer, COMMAND_RESPONSE_T *response);
}GET_CMD_INFO_T;



/* do not add padding bytes to struct members */
typedef struct
{
	char flash_apn[MAX_APN_NAME_LEN];
	char flash_apnusername[MAX_APN_USERNAME_LEN];
	char flash_apnpassword[MAX_APN_PASSWORD_LEN];
	char server_ip[MAX_SERVER_ADDR_LEN];
	char server_port[6];
	char device_id[16];
	char password[MAX_SET_COMMAND_PSWD_LENGTH + 1];
	bool blockage_status_in_ram;
	bool roaming_activation;
	bool sms_activation;
	bool engine_blockage;
	uint32_t msg_period_roaming_ignited;
	uint32_t msg_period_roaming_not_ignited;
	uint32_t msg_period_not_roaming_ignited;
	uint32_t msg_period_not_roaming_not_ignited;
	uint16_t u16_speedLimit;
	uint16_t u16_speedLimitViolationDuration;
	uint32_t u32_maxStopTime;
	uint32_t u32_maxIdleTime;
	CAN_BITRATE canBusBitrate;
	CAN_FRAME_TYPE  canBusFrameType;
	uint32_t gps_baud_rate;
	uint32_t g_threshold;
	RFID_CH_SETTING_T rfid_ch_setting;
	HX711_CALIB_T calib_coeffs;
	uint32_t chksum;
}FLASH_SETTINGS_T;

COMMAND_RESULT_T ProcessReceivedData(char *dataBuffer, COMMAND_RESPONSE_T *response, COMMAND_SOURCE_T cmdSource);

uint32_t Get_FlashKmValue();
uint16_t settings_get_max_speed_limit();
uint16_t Get_MaxSpeedViolationDuration();

void settings_get_registered_node_table(REG_NODE_INFO_T *reg_node_list);
bool settings_load_registered_node_table();
bool settings_load_user_settings();
bool settings_read_user_settings(FLASH_SETTINGS_T *settings);
bool settings_update_km_counter(uint32_t newValue);

bool validate_connection_params(FLASH_SETTINGS_T *settings);
void settings_load_km_counter();
void settings_load_blockage_status();
void settings_update_gps_baudrate(uint32_t gps_baud_rate);


void Set_BlockageStatus(BLOCKAGE_STATUS_T new_status);
void Set_BlockageSource(COMMAND_SOURCE_T source);


void GetDefaultUserSettings(const FLASH_SETTINGS_T *settings);
bool settings_update_all(FLASH_SETTINGS_T *new_settings);

bool isRoamingActivated();
void settings_get(FLASH_SETTINGS_T *user_settings);
void WriteInitialValuesToFlash();
void settings_print();
void settings_get_registered_node_list(REG_NODE_INFO_T *reg_node_list);
void settings_check_persisted_blockage();
bool settings_read_to_ram();
void settings_print_node_table();
int  settings_search_in_registered_node_table(char *node_id);
bool settings_register_node(REG_NODE_INFO_T * node);
bool settings_remove_node_from_flash_table(int node_index);
bool settings_update_node_table();
uint32_t settings_get_msg_period_not_ignited_not_roaming();
uint32_t settings_get_msg_period_not_ignited_roaming();
uint32_t settings_get_msg_period_ignited_not_roaming();
uint32_t settings_get_msg_period_ignited_roaming();
uint32_t settings_get_max_idle_time();
uint32_t settings_get_max_stop_time();
uint16_t settings_get_speed_limit();
uint16_t settings_get_speed_limit_violation_duration();
CAN_BITRATE settings_get_can_bitrate();
CAN_FRAME_TYPE settings_get_can_frame_type();
uint32_t get_g_threshold_setting();
bool settings_get_rfid_check(RFID_CH_SETTING_T *rfid_setting);
void BeginGetResponse(char *pBuf, COMMAND_TYPE_T command);
bool settings_load_din_functions();
bool settings_update_din_func_table();
bool validatePhoneNumber(char *number, uint8_t length);
void settings_print_din_func_table();
DIN_PROPERTIES_T settings_get_din_properties(DIG_INPUT_CH_NUM ch_number);
uint16_t settings_get_buzzer_alert_duration();
void settings_get_calibration_coefficents(HX711_CALIB_T * calib_coeffs);
bool settings_check_lbs_activation_status();
#endif /* SETTINGS_H_ */

