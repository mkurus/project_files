#include "chip.h"
#include "board.h"
#include "timer.h"
#include "trace.h"
#include "MMA8652.h"
#include "gSensor.h"
#include <string.h>
#include <stdlib.h>
#include "math.h"

G_ALARM_INFO g_alarm_queue[G_ALARM_QUEUE_SIZE];
/************************************************************/
void Init_DriverProfileTask()
{
	  memset(g_alarm_queue ,0, sizeof(g_alarm_queue));
}
/************************************************************/
G_VALUES_T MovingAverage(G_VALUES_T *g_value_samples, uint8_t lag)
{
	G_VALUES_T movAvgBuffer;
	float xSum = 0;
	float ySum = 0;
	float zSum = 0;
	char printBuf[128];
	uint8_t i;

	for( i= 0; i < lag; i++){
		xSum += g_value_samples[i].xAccel;
		ySum += g_value_samples[i].yAccel;
		zSum += g_value_samples[i].zAccel;
		sprintf(printBuf,"Sampled Values: %f,%f,%f\n",g_value_samples[i].xAccel,
															 g_value_samples[i].yAccel,
															 g_value_samples[i].zAccel);
	//	PRINT_K(printBuf);
	}

	movAvgBuffer.xAccel = xSum / lag;
	movAvgBuffer.yAccel = ySum / lag;
	movAvgBuffer.zAccel = zSum / lag;

	sprintf(printBuf,"\nWindow Average Values: %f,%f,%f\n",movAvgBuffer.xAccel,
														 movAvgBuffer.yAccel,
														 movAvgBuffer.zAccel);
	//PRINT_K(printBuf);

	return movAvgBuffer;
}
/************************************************************/
void ShiftBuffer(G_VALUES_T *buffer, uint16_t bufferSize)
{
	uint8_t i;

	for( i= 0; i< bufferSize; i++)
		buffer[i] = buffer[i+1];
}
/************************************************************/
bool check_sudden_deacceleration(uint16_t speed, uint16_t heading, G_VALUES_T *g_values)
{
	static G_ALARM_INFO g_alarm;
	static ACC_STATE deacc_state = G_OVER_THRESHOLD;
	static uint16_t g_alarm_100_msecs = 0;
	int8_t  alarm_queue_index = 0;
	char printBuf[256];

			switch(deacc_state)
			{
			   	 case G_OVER_THRESHOLD:
			   		 if(g_values->xAccel <= SUDDEN_STOP_THRESHOLD_G_VALUE){
			   			 g_alarm_100_msecs++;
			   		     g_alarm.initial_speed = speed;     /* keep initial speed and g values*/
			   		    if(g_values->xAccel < g_alarm.max_g)
			   		    	g_alarm.max_g = g_values->xAccel;
			   			  if(g_alarm_100_msecs >= SUDDEN_STOP_HIGH_THRESHOLD_TICK_COUNT){
			   				  PRINT_K("\n*********Ani durma basladi*******\n");
			   				  deacc_state = G_BELOW_THRESHOLD;
			   			  }
			   		  }
			   		else
			   			g_alarm_100_msecs = 0;
			   		break;

			   	  case G_BELOW_THRESHOLD:
			   		  if(g_values->xAccel <= SUDDEN_STOP_THRESHOLD_G_VALUE){
			   			 g_alarm_100_msecs++;
			   			  if(g_values->xAccel < g_alarm.max_g)   /* update maximum g value*/
			   				 g_alarm.max_g = g_values->xAccel;
			   		  }
			   		  /* higher g value  than threshold detected */
			   		  else{
			   			  g_alarm.final_speed = speed;
			   			  g_alarm.duration = g_alarm_100_msecs *100;
			   			  if(g_alarm_100_msecs > SUDDEN_STOP_LOW_THRESHOLD_TICK_COUNT){
			   				  alarm_queue_index = get_free_alarm_buffer_index();
			   				  if(alarm_queue_index > -1){
			   					  g_alarm_queue[alarm_queue_index] = g_alarm;
			   					  strcpy(g_alarm_queue[alarm_queue_index].alarm_str, "SST");
			   					  g_alarm_queue[alarm_queue_index].alarm_exist = TRUE;
			   					  sprintf(printBuf,"\nIvme degeri %d ms %f uzerinde kaldi.Max g value %f\n,", g_alarm_100_msecs*100,
			   																								  SUDDEN_STOP_THRESHOLD_G_VALUE,
																						                      g_alarm_queue[alarm_queue_index].max_g);
			   					  PRINT_K(printBuf);
			   				  }
			   				  g_alarm_100_msecs = 0;
			   				  deacc_state = G_OVER_THRESHOLD;
			   			  }
			   		   }
			   		   break;
			}

}
/************************************************************/
bool check_sudden_acceleration(uint16_t speed, uint16_t heading, G_VALUES_T *g_values)
{
	static G_ALARM_INFO g_alarm;
	static ACC_STATE acc_state = G_BELOW_THRESHOLD;
	static uint16_t g_alarm_100_msecs = 0;
	int8_t  alarm_queue_index = 0;
	char printBuf[256];

		   switch(acc_state)
		   {
		   	   case G_BELOW_THRESHOLD:
		   		   if(g_values->xAccel >= SUDDEN_ACCL_THRESHOLD_G_VALUE){
		   			   g_alarm_100_msecs++;
		   			   g_alarm.initial_speed = speed;     /* keep initial speed and g values*/
		   			   /* update max. g value */
		   			if(g_values->xAccel > g_alarm.max_g)
		   			   g_alarm.max_g = g_values->xAccel;

		   			if(g_alarm_100_msecs >= SUDDEN_ACC_HIGH_THRESHOLD_TICK_COUNT){
		   				   PRINT_K("\n*********Ani hizlanma basladi*******\n");
		   				   acc_state = G_OVER_THRESHOLD;
		   			   }
		   		   }
		   		   else
		   			   g_alarm_100_msecs = 0;
		   		   break;

		   	   case G_OVER_THRESHOLD:
		   		   if(g_values->xAccel >= SUDDEN_ACCL_THRESHOLD_G_VALUE){
		   			   g_alarm_100_msecs++;
		   			   if(g_values->xAccel > g_alarm.max_g)   /* update maximum g value*/
		   				   g_alarm.max_g = g_values->xAccel;
		   		   }
		   		   else{
		   			   g_alarm.final_speed = speed;
		   			   g_alarm.duration = g_alarm_100_msecs *100;
		   			   if(g_alarm_100_msecs > SUDDEN_ACC_LOW_THRESHOLD_TICK_COUNT){
		   				/* generate alarm */
		   				   alarm_queue_index = get_free_alarm_buffer_index();
		   				   if(alarm_queue_index > -1){

		   					   g_alarm_queue[alarm_queue_index] = g_alarm;
		   					   g_alarm_queue[alarm_queue_index].alarm_exist = TRUE;
		   					   strcpy(g_alarm_queue[alarm_queue_index].alarm_str, "SAC");
		   					   sprintf(printBuf,"\nIvme degeri %d ms %f uzerinde kaldi.Max g value %f\n,",
		   		                                              g_alarm_100_msecs*100,
															  SUDDEN_ACCL_THRESHOLD_G_VALUE,
															  g_alarm_queue[alarm_queue_index].max_g);
		   					   PRINT_K(printBuf);
		   				   }
		   				   g_alarm_100_msecs = 0;
		   				   acc_state = G_BELOW_THRESHOLD;
		   			   }
		   		   }
		   		   break;
		   	   }
}
/************************************************************/
bool check_xy_acceleration(uint16_t speed, uint16_t heading, G_VALUES_T *g_values)
{
	static G_ALARM_INFO g_alarm;
	static ACC_STATE acc_state = G_BELOW_THRESHOLD;
	static uint16_t g_alarm_100_msecs = 0;
	int8_t  alarm_queue_index = 0;
	char printBuf[256];

	float total_g;

	total_g = sqrt(pow(g_values->xAccel ,2) + pow(g_values->yAccel ,2));

				switch(acc_state)
			    {
			   	   case G_BELOW_THRESHOLD:
			   	    if(total_g >= SUDDEN_ACCL_THRESHOLD_G_VALUE){
			   			g_alarm_100_msecs++;
			   			   g_alarm.initial_speed = speed;     /* keep initial speed and g values*/
			   			if(total_g > g_alarm.max_g)
			   			   g_alarm.max_g = total_g;
			   			   if(g_alarm_100_msecs >= SUDDEN_ACC_HIGH_THRESHOLD_TICK_COUNT){
			   				   PRINT_K("\n*********Makas hareketi basladi*******\n");
			   				   acc_state = G_OVER_THRESHOLD;
			   			   }
			   		   }
			   		   else
			   			   g_alarm_100_msecs = 0;
			   		   break;

			   	   case G_OVER_THRESHOLD:
			   		 if(total_g >= SUDDEN_ACCL_THRESHOLD_G_VALUE){
			   			   g_alarm_100_msecs++;
			   			   if(total_g > g_alarm.max_g)   /* update maximum g value*/
			   				   g_alarm.max_g = total_g;
			   		   }
			   		   else{
			   			   g_alarm.final_speed = speed;
			   			   g_alarm.duration = g_alarm_100_msecs *100;
			   			   if(g_alarm_100_msecs > SUDDEN_ACC_LOW_THRESHOLD_TICK_COUNT){
			   				/* generate alarm */
			   				   alarm_queue_index = get_free_alarm_buffer_index();
			   				   if(alarm_queue_index > -1){

			   					   g_alarm_queue[alarm_queue_index] = g_alarm;
			   					   g_alarm_queue[alarm_queue_index].alarm_exist = TRUE;
			   					   strcpy(g_alarm_queue[alarm_queue_index].alarm_str, "SAC");
			   					   sprintf(printBuf,"\nAlarm index: %d, Makas hareketi ivme degeri %d ms %f uzerinde kaldi.Max g value %f\n,",alarm_queue_index,
			   							                                                                                       g_alarm_100_msecs*100,
																															   SUDDEN_ACCL_THRESHOLD_G_VALUE,
																															   g_alarm_queue[alarm_queue_index].max_g);
			   					   PRINT_K(printBuf);
			   				   }
			   				   g_alarm_100_msecs = 0;
			   				   acc_state = G_BELOW_THRESHOLD;
			   			   }
			   		   }
			   		   break;
			   	   }
}
/************************************************************/
int8_t get_free_alarm_buffer_index()
{
	uint8_t i;

	for(i =0; i< G_ALARM_QUEUE_SIZE; i++){
		if(!(g_alarm_queue[i].alarm_exist))
			return i;
	}
	return -1;
}
/************************************************************/
bool get_gsensor_alarm_status()
{
	int i;
	for(i =0; i< G_ALARM_QUEUE_SIZE; i++){
		if(g_alarm_queue[i].alarm_exist){
			return TRUE;
		}

	}
	return FALSE;
}
/************************************************************/
void get_next_gsensor_alarm(G_ALARM_INFO *g_alarm)
{
	int i;

	for(i =0; i< G_ALARM_QUEUE_SIZE; i++){
		if(g_alarm_queue[i].alarm_exist){
			g_alarm_queue[i].alarm_exist = FALSE;
			*g_alarm = g_alarm_queue[i];
			 return;
		}
	}
}
/************************************************************/
bool push_g_alarm(G_ALARM_INFO *g_alarm)
{
	int i;

	for(i =0; i< G_ALARM_QUEUE_SIZE; i++){
		if(!g_alarm_queue[i].alarm_exist){
			memcpy(&g_alarm_queue[i], g_alarm, sizeof(G_ALARM_INFO));
			return true;
		}
	}
	return false;
}
